#!/usr/bin/env node

const ClickUpTimeTracker = require('./index.js');
const UserPreferences = require('./user-preferences.js');
const readline = require('readline');
const moment = require('moment');
const colors = require('colors');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

async function setupConfig() {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ClickUp Time Tracker\n'.blue);
    
    const token = await question('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ClickUp API Token: ');
    const teamId = await question('–í–≤–µ–¥–∏—Ç–µ Team ID (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è): ');
    
    console.log('\nüí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:'.yellow);
    const hourlyRate = await question('–ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 25): ') || '25';
    const currency = await question('–í–∞–ª—é—Ç–∞ [USD/RUB/EUR] (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é USD): ') || 'USD';
    const taxRate = await question('–ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –¥–æ–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.2 –¥–ª—è 20%, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.2): ') || '0.2';
    
    const fs = require('fs');
    const envContent = `# ClickUp API Token
CLICKUP_TOKEN=${token}

# Team ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
TEAM_ID=${teamId}

# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
HOURLY_RATE=${hourlyRate}
CURRENCY=${currency.toUpperCase()}
TAX_RATE=${taxRate}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
SHOW_TIME_ENTRIES=true
SHOW_DAILY_BREAKDOWN=false
SHOW_COST=true
`;
    
    fs.writeFileSync('.env', envContent);
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª\n'.green);
}

async function configureDisplaySettings() {
    try {
        const userPrefs = new UserPreferences();
        console.log('\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤\n'.blue);
        
        console.log('–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:'.yellow);
        const current = userPrefs.getAll();
        console.log(`üí∞ –ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: ${current.hourlyRate} ${current.currency}`);
        console.log(`üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${current.showCost ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`üìù –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏: ${current.showTimeEntries ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`üìÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–Ω–∏: ${current.showDays ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`üìã –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏: ${current.showTasks ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`üìà –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ${current.showStatistics ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ${current.sortBy}`);
        
        const change = await question('\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? (y/n): ');
        if (change.toLowerCase() !== 'y') return;
        
        console.log('\nüí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:'.yellow);
        const newRate = await question(`–ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (—Ç–µ–∫—É—â–∞—è: ${current.hourlyRate}): `);
        if (newRate) userPrefs.set('hourlyRate', parseFloat(newRate));
        
        const newCurrency = await question(`–í–∞–ª—é—Ç–∞ (—Ç–µ–∫—É—â–∞—è: ${current.currency}): `);
        if (newCurrency) userPrefs.set('currency', newCurrency.toUpperCase());
        
        const newTaxRate = await question(`–ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –¥–æ–ª—è—Ö (—Ç–µ–∫—É—â–∞—è: ${current.taxRate}): `);
        if (newTaxRate) userPrefs.set('taxRate', parseFloat(newTaxRate));
        
        console.log('\nüìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:'.yellow);
        
        const showCost = await question(`–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å? [y/n] (—Ç–µ–∫—É—â–µ–µ: ${current.showCost ? 'y' : 'n'}): `);
        if (showCost) userPrefs.set('showCost', showCost.toLowerCase() === 'y');
        
        const showTimeEntries = await question(`–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏? [y/n] (—Ç–µ–∫—É—â–µ–µ: ${current.showTimeEntries ? 'y' : 'n'}): `);
        if (showTimeEntries) userPrefs.set('showTimeEntries', showTimeEntries.toLowerCase() === 'y');
        
        const showDays = await question(`–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–±–∏–≤–∫—É –ø–æ –¥–Ω—è–º? [y/n] (—Ç–µ–∫—É—â–µ–µ: ${current.showDays ? 'y' : 'n'}): `);
        if (showDays) userPrefs.set('showDays', showDays.toLowerCase() === 'y');
        
        const showTasks = await question(`–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏? [y/n] (—Ç–µ–∫—É—â–µ–µ: ${current.showTasks ? 'y' : 'n'}): `);
        if (showTasks) userPrefs.set('showTasks', showTasks.toLowerCase() === 'y');
        
        const showStatistics = await question(`–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? [y/n] (—Ç–µ–∫—É—â–µ–µ: ${current.showStatistics ? 'y' : 'n'}): `);
        if (showStatistics) userPrefs.set('showStatistics', showStatistics.toLowerCase() === 'y');
        
        console.log('\nüîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:'.yellow);
        console.log('1. –ü–æ –≤—Ä–µ–º–µ–Ω–∏ (—É–±—ã–≤.)');
        console.log('2. –ü–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤–æ–∑—Ä.)');
        console.log('3. –ü–æ –∏–º–µ–Ω–∏ (–ê-–Ø)');
        console.log('4. –ü–æ –∏–º–µ–Ω–∏ (–Ø-–ê)');
        console.log('5. –ü–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (—É–±—ã–≤.)');
        
        const sortChoice = await question(`–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (1-5, —Ç–µ–∫—É—â–∞—è: ${current.sortBy}): `);
        const sortOptions = ['time_desc', 'time_asc', 'name_asc', 'name_desc', 'cost_desc'];
        if (sortChoice && sortChoice >= 1 && sortChoice <= 5) {
            userPrefs.set('sortBy', sortOptions[sortChoice - 1]);
        }
        
        console.log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!'.green);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error.message.red);
    }
}

async function interactiveMode() {
    try {
        console.log('üìä ClickUp Time Tracker - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º\n'.rainbow);
        
        const choice = await question(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
1. –û—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
2. –û—Ç—á–µ—Ç –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü  
3. –û—Ç—á–µ—Ç –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü
4. –û—Ç—á–µ—Ç –ø–æ –¥–Ω—è–º (–±–µ–∑ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á)
5. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
6. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å ClickUp –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
7. –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
8. –í—ã—Ö–æ–¥

–í–∞—à –≤—ã–±–æ—Ä (1-8): `);

        switch (choice.trim()) {
            case '1':
                console.log('\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü...\n'.blue);
                const tracker1 = new ClickUpTimeTracker();
                await tracker1.generateCurrentMonthReport();
                break;
                
            case '2':
                console.log('\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü...\n'.blue);
                const tracker2 = new ClickUpTimeTracker();
                await tracker2.generatePreviousMonthReport();
                break;
                
            case '3':
                const year = await question('–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024): ');
                const month = await question('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü (1-12): ');
                
                const yearNum = parseInt(year);
                const monthNum = parseInt(month);
                
                if (isNaN(yearNum) || isNaN(monthNum) || monthNum < 1 || monthNum > 12) {
                    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞ –∏–ª–∏ –º–µ—Å—è—Ü–∞'.red);
                    break;
                }
                
                console.log(`\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ ${monthNum}/${yearNum}...\n`.blue);
                const tracker3 = new ClickUpTimeTracker();
                await tracker3.generateMonthlyReport(yearNum, monthNum);
                break;
                
            case '4':
                const yearDaily = await question('–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π): ') || moment().year();
                const monthDaily = await question('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π): ') || (moment().month() + 1);
                
                const yearDailyNum = parseInt(yearDaily);
                const monthDailyNum = parseInt(monthDaily);
                
                if (isNaN(yearDailyNum) || isNaN(monthDailyNum) || monthDailyNum < 1 || monthDailyNum > 12) {
                    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞ –∏–ª–∏ –º–µ—Å—è—Ü–∞'.red);
                    break;
                }
                
                console.log(`\nüìÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–Ω—è–º –∑–∞ ${monthDailyNum}/${yearDailyNum}...\n`.blue);
                const tracker4 = new ClickUpTimeTracker();
                await tracker4.generateDailyReport(yearDailyNum, monthDailyNum);
                break;
                
            case '5':
                await configureDisplaySettings();
                break;
                
            case '6':
                await setupConfig();
                break;
                
            case '7':
                const userPrefs = new UserPreferences();
                userPrefs.reset();
                console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'.green);
                break;
                
            case '8':
                console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'.yellow);
                rl.close();
                return;
                
            default:
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä'.red);
        }
        
        const continueChoice = await question('\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ');
        if (continueChoice.toLowerCase() === 'y') {
            await interactiveMode();
        } else {
            console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'.yellow);
            rl.close();
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message.red);
        rl.close();
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
const fs = require('fs');
if (!fs.existsSync('.env')) {
    console.log('‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...\n'.yellow);
    setupConfig().then(() => {
        interactiveMode();
    });
} else {
    interactiveMode();
}
