/**
 * –î–µ–º–æ –≤–µ—Ä—Å–∏—è ClickUp Time Tracker –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
 */

const moment = require('moment');
const colors = require('colors');
const fs = require('fs');
const path = require('path');
const UserPreferences = require('./user-preferences');

class ClickUpTimeTrackerDemo {
    constructor() {
        this.reportsDir = path.join(__dirname, 'reports');
        if (!fs.existsSync(this.reportsDir)) {
            fs.mkdirSync(this.reportsDir);
        }
        // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.userPrefs = new UserPreferences();
        this.userPrefs.set('hourlyRate', 30); // –î–µ–º–æ —Å—Ç–∞–≤–∫–∞
        this.userPrefs.set('currency', 'USD');
        this.userPrefs.set('showCost', true);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    generateMockData(year, month) {
        const startOfMonth = moment().year(year).month(month - 1).startOf('month');
        const endOfMonth = moment().year(year).month(month - 1).endOf('month');

        const mockTasks = [
            {
                id: '123456',
                name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                status: '–í —Ä–∞–±–æ—Ç–µ',
                list: 'Backend Development',
                folder: 'Web Project',
                space: 'Development',
                url: 'https://app.clickup.com/t/123456'
            },
            {
                id: '123457',
                name: '–§–∏–∫—Å –±–∞–≥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                status: '–ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
                list: 'Bug Fixes',
                folder: 'Web Project',
                space: 'Development',
                url: 'https://app.clickup.com/t/123457'
            },
            {
                id: '123458',
                name: '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
                status: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
                list: 'Documentation',
                folder: 'Admin Tasks',
                space: 'Management',
                url: 'https://app.clickup.com/t/123458'
            },
            {
                id: '123459',
                name: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                status: '–í —Ä–∞–±–æ—Ç–µ',
                list: 'Database Tasks',
                folder: 'Infrastructure',
                space: 'Development',
                url: 'https://app.clickup.com/t/123459'
            }
        ];

        const mockTimeEntries = [];
        let totalTime = 0;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
        mockTasks.forEach((task, taskIndex) => {
            const entriesCount = Math.floor(Math.random() * 10) + 5; // 5-15 –∑–∞–ø–∏—Å–µ–π
            let taskTotalTime = 0;

            for (let i = 0; i < entriesCount; i++) {
                const randomDay = Math.floor(Math.random() * endOfMonth.date()) + 1;
                const entryDate = moment().year(year).month(month - 1).date(randomDay);
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                if (entryDate.day() === 0 || entryDate.day() === 6) continue;

                const startHour = Math.floor(Math.random() * 8) + 9; // 9-17 —á–∞—Å–æ–≤
                const duration = (Math.floor(Math.random() * 4) + 1) * 30 * 60 * 1000; // 30–º–∏–Ω - 2—á–∞—Å–∞
                
                const startTime = entryDate.hour(startHour).minute(0).valueOf();
                const endTime = startTime + duration;

                const descriptions = [
                    '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º',
                    '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º',
                    '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞',
                    '–ö–æ–¥ —Ä–µ–≤—å—é –∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥',
                    '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑',
                    '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏',
                    '–ù–∞–ø–∏—Å–∞–Ω–∏–µ unit —Ç–µ—Å—Ç–æ–≤',
                    '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
                ];

                mockTimeEntries.push({
                    id: `entry_${taskIndex}_${i}`,
                    task: task,
                    description: descriptions[Math.floor(Math.random() * descriptions.length)],
                    duration: duration,
                    start: startTime,
                    end: endTime,
                    user: {
                        id: 'demo_user',
                        username: 'demo_user',
                        email: 'demo@example.com'
                    }
                });

                taskTotalTime += duration;
            }

            task.totalTime = taskTotalTime;
            totalTime += taskTotalTime;
        });

        return {
            user: {
                id: 'demo_user',
                username: 'demo_user',
                email: 'demo@example.com'
            },
            timeEntries: mockTimeEntries,
            tasks: mockTasks,
            totalTime: totalTime
        };
    }

    formatDuration(milliseconds) {
        return this.userPrefs.formatTime(milliseconds);
    }

    groupTimeEntriesByDay(timeEntries) {
        const dayGroups = {};
        
        for (const entry of timeEntries) {
            const dayKey = moment(parseInt(entry.start)).format('YYYY-MM-DD');
            
            if (!dayGroups[dayKey]) {
                dayGroups[dayKey] = {
                    date: dayKey,
                    entries: [],
                    totalTime: 0,
                    tasks: new Set()
                };
            }
            
            dayGroups[dayKey].entries.push(entry);
            dayGroups[dayKey].totalTime += parseInt(entry.duration);
            dayGroups[dayKey].tasks.add(entry.task?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞');
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Set –≤ Array –¥–ª—è JSON
        Object.values(dayGroups).forEach(day => {
            day.tasks = Array.from(day.tasks);
        });
        
        return dayGroups;
    }

    calculateStatistics(timeEntries, totalTime) {
        const stats = {
            totalEntries: timeEntries.length,
            totalTime: totalTime,
            cost: this.userPrefs.calculateCost(totalTime),
            avgSessionTime: timeEntries.length > 0 ? totalTime / timeEntries.length : 0,
            workingDays: 0,
            weekdayTime: 0,
            weekendTime: 0
        };

        const workingDays = new Set();
        
        for (const entry of timeEntries) {
            const entryMoment = moment(parseInt(entry.start));
            const dayKey = entryMoment.format('YYYY-MM-DD');
            workingDays.add(dayKey);
            
            if (entryMoment.day() === 0 || entryMoment.day() === 6) {
                stats.weekendTime += parseInt(entry.duration);
            } else {
                stats.weekdayTime += parseInt(entry.duration);
            }
        }
        
        stats.workingDays = workingDays.size;
        stats.avgDayTime = stats.workingDays > 0 ? totalTime / stats.workingDays : 0;
        
        return stats;
    }

    async generateDemoReport(year, month) {
        console.log(`üé≠ –î–ï–ú–û –†–ï–ñ–ò–ú - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ ${month}/${year}...`.magenta);
        console.log('‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏\n'.yellow);

        const mockData = this.generateMockData(year, month);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –∑–∞–¥–∞—á–∞–º
        const taskGroups = {};
        
        for (const entry of mockData.timeEntries) {
            const taskId = entry.task.id;
            
            if (!taskGroups[taskId]) {
                taskGroups[taskId] = {
                    task: entry.task,
                    entries: [],
                    totalTime: 0
                };
            }
            
            taskGroups[taskId].entries.push(entry);
            taskGroups[taskId].totalTime += entry.duration;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        const startOfMonth = moment().year(year).month(month - 1).startOf('month');
        const endOfMonth = moment().year(year).month(month - 1).endOf('month');

        const report = {
            user: mockData.user,
            period: {
                start: startOfMonth.format('DD.MM.YYYY'),
                end: endOfMonth.format('DD.MM.YYYY'),
                month: month,
                year: year
            },
            summary: {
                totalTasks: Object.keys(taskGroups).length,
                totalTime: mockData.totalTime,
                totalTimeFormatted: this.formatDuration(mockData.totalTime)
            },
            tasks: []
        };

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const sortedTasks = Object.values(taskGroups).sort((a, b) => b.totalTime - a.totalTime);

        for (const taskGroup of sortedTasks) {
            const task = taskGroup.task;
            
            report.tasks.push({
                id: task.id,
                name: task.name,
                url: task.url,
                status: task.status,
                list: task.list,
                folder: task.folder,
                space: task.space,
                totalTime: taskGroup.totalTime,
                totalTimeFormatted: this.formatDuration(taskGroup.totalTime),
                entriesCount: taskGroup.entries.length,
                entries: taskGroup.entries.map(entry => ({
                    id: entry.id,
                    description: entry.description,
                    duration: entry.duration,
                    durationFormatted: this.formatDuration(entry.duration),
                    start: moment(entry.start).format('DD.MM.YYYY HH:mm'),
                    end: moment(entry.end).format('DD.MM.YYYY HH:mm')
                }))
            });
        }

        // –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        this.printReport(report);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        await this.saveReport(report, 'demo');

        console.log('\nüé≠ –≠—Ç–æ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ! –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º ClickUp —Ç–æ–∫–µ–Ω–æ–º.'.magenta);

        return report;
    }

    printReport(report) {
        console.log('\n' + '='.repeat(80).rainbow);
        console.log(`üìä –î–ï–ú–û –û–¢–ß–ï–¢ –ü–û –í–†–ï–ú–ï–ù–ò –ó–ê ${report.period.month}/${report.period.year}`.bold.white);
        console.log('='.repeat(80).rainbow);
        
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${report.user.username} (${report.user.email})`.cyan);
        console.log(`üìÖ –ü–µ—Ä–∏–æ–¥: ${report.period.start} - ${report.period.end}`.cyan);
        console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${report.summary.totalTimeFormatted}`.green.bold);
        console.log(`üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: ${report.summary.totalTasks}`.yellow);
        
        console.log('\n' + 'üìù –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ó–ê–î–ê–ß–ê–ú:'.bold.white);
        console.log('-'.repeat(80).gray);

        for (let i = 0; i < report.tasks.length; i++) {
            const task = report.tasks[i];
            console.log(`\n${(i + 1)}. ${task.name}`.bold.white);
            console.log(`   ID: ${task.id}`.gray);
            console.log(`   –°—Ç–∞—Ç—É—Å: ${task.status}`.blue);
            console.log(`   –°–ø–∏—Å–æ–∫: ${task.list}`.blue);
            console.log(`   –ü–∞–ø–∫–∞: ${task.folder}`.blue);
            console.log(`   –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: ${task.space}`.blue);
            console.log(`   –í—Ä–µ–º—è: ${task.totalTimeFormatted}`.green.bold);
            console.log(`   –ó–∞–ø–∏—Å–µ–π: ${task.entriesCount}`.yellow);
            console.log(`   URL: ${task.url}`.gray);
        }
        
        console.log('\n' + '='.repeat(80).rainbow);
    }

    async saveReport(report, prefix = '') {
        const fileName = `${prefix ? prefix + '_' : ''}report_${report.period.year}_${report.period.month.toString().padStart(2, '0')}.json`;
        const filePath = path.join(this.reportsDir, fileName);
        
        fs.writeFileSync(filePath, JSON.stringify(report, null, 2), 'utf8');
        console.log(`üíæ –î–µ–º–æ –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${filePath}`.green);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ
async function runDemo() {
    try {
        const tracker = new ClickUpTimeTrackerDemo();
        
        const args = process.argv.slice(2);
        let year, month;
        
        if (args.length === 2) {
            year = parseInt(args[0]);
            month = parseInt(args[1]);
        } else {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            const now = moment();
            year = now.year();
            month = now.month() + 1;
        }
        
        await tracker.generateDemoReport(year, month);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–µ–º–æ:', error.message.red);
    }
}

module.exports = ClickUpTimeTrackerDemo;

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    runDemo();
}
